using System;
using System.Text;
using System.Collections.Generic;

namespace DeepLingo {
    class CILGenerator {

        SemanticAnalyzer SymbolTable;
        string funName="";
        private string loopExit;
        int labelCounter = 0;
        
        string GenerateLabel() {
            return String.Format("${0:000000}", labelCounter++);
        }
        
        public CILGenerator(SemanticAnalyzer table) {
            this.SymbolTable = table;
        }
        
        public string Visit(Programme node) {
            var sb = new StringBuilder();
            sb.Append("// Code generated by the DeepLingo compiler\n\n");
            sb.Append(".assembly extern 'deeplingolib' { }\n\n");
            sb.Append(".assembly 'deeplingo' { }\n\n");
            sb.Append(".class public 'Test' extends ['mscorlib']'System'.'Object' {\n");
            var result="";
            foreach (var n in node) {
                if (n is IdList){
                    foreach(var j in node){
                        result = "\t\tldsfld '"
                        + j.AnchorToken.Lexeme 
                        + "'\n";
                        sb.Append(result);
                    }
                }else {
                    sb.Append(Visit((dynamic) node[0]));
                }
            }
            sb.Append("}\n");
            
            return sb.ToString();
            
        }
        
        
        //-----------------------------------------------------------
        public string Visit(FunctionDef node) {
            var sb = new StringBuilder();
            var result="";
            funName = node.AnchorToken.Lexeme;
            result = "\t.method public static void '" + funName + "'() {\n";
            sb.Append(result);
            sb.Append("\t\t.entrypoint\n");
            sb.Append(VisitChildren(node));
            //sb.Append("\t\tpop\n");
            sb.Append("\t\tret\n");
            sb.Append("\t}\n");
            
            return sb.ToString();
        }
        
        //-----------------------------------------------------------
        
        public string Visit(ParamList node){
            var sb = new StringBuilder();
            var result = "";
            foreach(var n in node){
                result = "\t\tldarg '"
                + n.AnchorToken.Lexeme 
                + "'\n";
                sb.Append(result);
            }
            
            return sb.ToString();
        }
        
        //-----------------------------------------------------------
        public string Visit(IdList node) {
            var sb = new StringBuilder();
            var result = "";
            foreach(var n in node){
                result = "\t\tldloc '"
                + n.AnchorToken.Lexeme 
                + "'\n";
                sb.Append(result);
            }
            
            return sb.ToString();
        }
        
        
        //-----------------------------------------------------------
        public string Visit(FunctionCall node) {
            // Falta Esto!!!
            var sb = new StringBuilder();
            var result = "";
            if (node.AnchorToken.Lexeme.Equals("printi")){//Es m√©todo pre-definido;
                result = "\t\t" + Visit((dynamic) node[0])+"\n"
                       + "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Printi'(int32)\n"
                       + "\t\tpop\n"
                       +"call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Println'()\n"
                       +"\t\tpop\n";
            }else if (node.AnchorToken.Lexeme.Equals("printc")){
                result = "\t\tldc.i4 " + Visit((dynamic) node[0])+"\n"
                       + "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Printc'(int32)\n"
                       + "\t\tpop\n"
                       +"call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Println'()\n"
                       +"\t\tpop\n";
            }else if (node.AnchorToken.Lexeme.Equals("prints")){
                sb.Append(Visit((dynamic) node[0]));
                result = "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Prints'(int32)\n"
                       + "\t\tpop\n"
                       +"call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Println'()\n"
                       +"\t\tpop\n";
            }else if (node.AnchorToken.Lexeme.Equals("println")){
                sb.Append("\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Println'()\n\t\tpop\n");
            }else if (node.AnchorToken.Lexeme.Equals("readi")){
                sb.Append(Visit((dynamic) node[0]));
                sb.Append("\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Readi'()\n\t\tpop\n");
            }else if (node.AnchorToken.Lexeme.Equals("reads")){
                sb.Append(Visit((dynamic) node[0]));
                sb.Append("\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Reads'()\n\t\tpop\n");
            }else if (node.AnchorToken.Lexeme.Equals("new")){
                sb.Append("\t\tldc.i4. " + Visit((dynamic) node[0]) + "\n");
                sb.Append("call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n\t\tpop\n");
            }else if (node.AnchorToken.Lexeme.Equals("size")){
                sb.Append("\t\tldc.i4. " + Visit((dynamic) node[0]) + "\n");
                sb.Append("call int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Size'(int32)\n\t\tpop\n");
            }else if (node.AnchorToken.Lexeme.Equals("add")){
                result = VisitChildren(node)
                           + "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n"
                           + "\t\tpop\n";
                sb.Append(result);
            }
            sb.Append(result);
            return sb.ToString();
        }
        
        //-----------------------------------------------------------
        public string Visit(ExprList node) {
            return VisitChildren(node);
        }
        
        //-----------------------------------------------------------
        public string Visit(Assignment node) {
            var sb = new StringBuilder();
            //sb.Append("\t\t");
            sb.Append(Visit((dynamic) node[0]));
            sb.Append("\n\t\t");
            var result = "";
            if (SymbolTable.GlobalVars.Contains(node.AnchorToken.Lexeme)){//Es variable Global
                result="stsfld '" 
                + node.AnchorToken.Lexeme 
                + "'\n";
            }else if(SymbolTable.Table[funName].table[node.AnchorToken.Lexeme].funcType.Equals("local")){ //Es variable local
                result="stloc '" 
                + node.AnchorToken.Lexeme 
                + "'\n";
            }
            
            sb.Append(result);
            
            return sb.ToString();
        }
        
        //-----------------------------------------------------------
        public string Visit(Inc node) {
            return "\t\tldloc '" + node.AnchorToken.Lexeme + "'\n"
            + "\t\tldc.i4.1\n"
            + "\t\tadd.ovf\n";
        }
        
        //-----------------------------------------------------------
        public string Visit(Dec node) {
            return "\t\tldloc '" + node.AnchorToken.Lexeme + "'\n"
            + "\t\tldc.i4.1\n"
            + "\t\tsub.ovf\n";
            
        }
        
        //-----------------------------------------------------------
        public string Visit(If node) {
            var label = GenerateLabel();

            return String.Format(
                "{0}\t\tldc.i4 42\n\t\tbne.un '{1}'\n\t\t{2}\n\t'{1}':\n\t\t{3}\n\t\t{4}",
                Visit((dynamic) node[0]),
                label,
                Visit((dynamic) node[1]),
                Visit((dynamic) node[2]),
                Visit((dynamic) node[3])
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(ListStatements node) {
            return VisitChildren(node);
        }
        
        //-----------------------------------------------------------
        public string Visit(ListElseIf node) {
            return VisitChildren(node);
        }
        
        //-----------------------------------------------------------
        public string Visit(ElseIf node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\t{0}\n\t\tldc.i4 42\n\t\tbne.un '{1}'\n\t\t{2}\n\t'{1}':\n",
                Visit((dynamic) node[0]),
                label,
                Visit((dynamic) node[1])
            );
            
        }
        
        //-----------------------------------------------------------
        public string Visit(Loop node) {
            var label = GenerateLabel();
            var oldExitLoop = loopExit;
            loopExit = GenerateLabel();
            var result = "\t'"+label+"':\n"
                         + VisitChildren(node) 
                         + "\tbr " + label + "\n"
                         + "\t" + loopExit + ":\n";
            loopExit = oldExitLoop;
            return result;
        }
        
        //-----------------------------------------------------------
        public string Visit(Break node) {
            return "br " + loopExit + "\n";
        }
        
        //-----------------------------------------------------------
        public string Visit(Return node) {
            return "\t\t" + Visit((dynamic) node[0])+ "\n";
        }
        
        //-----------------------------------------------------------
        public string Visit(And node) {
            var label = GenerateLabel();
            var result = "\t\tldc.i4.0\n" 
                       + Visit((dynamic) node[0]) + "\n"
                       + "\t\tldc.i4 42\n"
                       + "\t\tbne.un " + label + "\n"
                       + Visit((dynamic) node[1]) + "\n"
                       + "\t\tldc.i4 42\n"
                       + "\t\tbne.un " + label + "\n"
                       + "\t\tpop\n"
                       + "\t\tldc.i4 42\n"
                       + "\t" +label + ":\n";
            return result;
        }
        
        //-----------------------------------------------------------
        public string Visit(Or node) {
            var label = GenerateLabel();
            var result = Visit((dynamic) node[1]) + "\n"
                       + Visit((dynamic) node[0]) + "\n"
                       + "\t\tldc.i4 42\n"
                       + "\t\tbne.un " + label + "\n"
                       + "\t\tpop\n"
                       + "\t\tldc.i4 42\n"
                       + "\t" + label + ":\n";
            return result;
        }
        
        //-----------------------------------------------------------
        public string Visit(Identifier node) {
            var sb = new StringBuilder();
            var result = "";
            if (SymbolTable.GlobalVars.Contains(node.AnchorToken.Lexeme)){//Es variable Global
                result="ldsfld '" 
                + node.AnchorToken.Lexeme + "'";
            }else if(SymbolTable.Table[funName].table[node.AnchorToken.Lexeme].funcType.Equals("local")){ //Es variable local
                result="ldloc '" 
                + node.AnchorToken.Lexeme+ "'";
            }else{//es parametro
                result="ldarg '" 
                + node.AnchorToken.Lexeme+ "'";
            }
            
            sb.Append(result);
            
            return sb.ToString();
            
        }
        
        //-----------------------------------------------------------
        public string Visit(IntLiteral node) {
            return "ldc.i4 " + node.AnchorToken.Lexeme;
        }
        
        
        //-----------------------------------------------------------
        public string Visit(CharLiteral node) {
            var number = (int)Convert.ToChar(node.AnchorToken.Lexeme.Substring(1,1));
            return number.ToString();
        
        }
        
        //-----------------------------------------------------------
        public string Visit(StringLiteral node) {
            var sb = new StringBuilder();
            var result = "\t\tldc.i4.0\n"
                       + "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'New'(int32)\n";
            sb.Append(result);
                
            var number = 0;
            var str = node.AnchorToken.Lexeme.Substring(1,node.AnchorToken.Lexeme.Length - 2);
            foreach (var i in str){
                number = (int)Convert.ToChar(i);
                result = "\t\tdup\n"
                   + "\t\tldc.i4 " + number.ToString() + "\n"
                   + "\t\tcall int32 class ['deeplingolib']'DeepLingo'.'Utils'::'Add'(int32,int32)\n"
                   + "\t\tpop\n";
                sb.Append(result);
            }
            return sb.ToString();
        }
        
        //-----------------------------------------------------------
        public string Visit(Less node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tblt '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(LessEq node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tble '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(Great node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tbgt '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(GreatEq node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tbge '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(Equals node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tbeq '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(NotEq node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4 42\n\t\t{0}\n\t\t{1}\n\t\tbne.un '{2}'\n\t\tpop\n\t\tldc.i4.0\n\t'{2}':\n",
                Visit((dynamic) node[0]),
                Visit((dynamic) node[1]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(Pos node) {
            return "\t\tldc.i4 " + Visit((dynamic) node[0]) + "\n";
                
        }
        
        //-----------------------------------------------------------
        public string Visit(Neg node) {
            
            return"\t\tldc.i4.0\n\t\t"+Visit((dynamic) node[0])+"\n\t\tsub.ov\n";
                
        }
        
        
        
        
        //-----------------------------------------------------------
        public string Visit(Not node) {
            var label = GenerateLabel();

            return String.Format(
                "\t\tldc.i4.0\n\t\t{0}\n\t\tldc.i4 42\n\t\tbeq '{1}'\n\t\tpop\n\t\tldc.i4 42\n\t'{1}':\n",
                Visit((dynamic) node[0]),
                label
            );
        }
        
        //-----------------------------------------------------------
        public string Visit(Add node) {
            return Visit((dynamic) node[0])
                +"\n\t\t" + Visit((dynamic) node[1])
                + "\n\t\tadd.ovf\n";
        }
        
        //-----------------------------------------------------------
        public string Visit(Subs node) {
            return Visit((dynamic) node[0])
                +"\n\t\t" + Visit((dynamic) node[1])
                + "\n\t\tsub.ovf\n";
        }
        
        //-----------------------------------------------------------
        public string Visit(Mult node) {
            return Visit((dynamic) node[0])
                +"\n\t\t" + Visit((dynamic) node[1])
                + "\n\t\tmul.ovf\n";
        }
        
        public string Visit(Div node) {
            return Visit((dynamic) node[0])
                +"\n\t\t" + Visit((dynamic) node[1])
                + "\n\t\tdiv.un\n";
        }
        
        public string Visit(Rem node) {
            return Visit((dynamic) node[0])
                +"\n\t\t" + Visit((dynamic) node[1])
                + "\n\t\trem.un\n";
        }
        
        string VisitChildren(Node node) {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();
        }
        
    }
}